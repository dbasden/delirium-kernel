	Need a way of adding stuff to a process specific page table, for different stuff. (Still todo) Although we could modify the page directory, it would be easier to copy the kernel space one, and then modify that per process. We would have to be *very* careful about adding stuff to kernel space if we decide that we want to allocate pages in any other way without updating EVERYTHING. This would suck<tm> Think of a better way to handle kernel stuff. Hardwire everything above or below a certain point and never change it?  This would mean NO page faults in that area of memory; 

TODO:
	- BUG: The slave pic cascade isn't working. Check masking etc on 
	       IRQ 2

	- BUG: Interrupt handlers can't spin on semaphores (or at least
	  not in any useful way -- they wont get interrupted). Need to
	  have semaphore locked stuff like vgaprint and the frameherd
	  notice when they are being called in an interrupt context and
	  not use a mutex

	- move the CPU inspecific stuff out of arch/i386/thread.c - stuff
	  like the short term scheduler, and other logic that would be
	  much cleaner if abstracted from the actual switching.
	  ONLY do this if it doesn't bloat; thread switching should be
	  VERY lightweight, and every CALL sucks.

	- kernel memory pools; At them moment huge amounts of memory
	  is being wasted by kgetpage() being used for every datastructure


	- need emergency stack so kprintf will work fine when stack corrupt
	   (Almost done. There *is* an emergency stack for when we have to
	   kill a running thread's stack in the process of wiping it out.
	   should just start using it in other places, or admit that the
	   initial stack is a huge waste if we don't continue to use it
	   in these edge cases)

	- #PF handler is blowing way %ecx, which is so not cool. Can't
	  check the %cr registers directly (??) so we have to find a 'spare'
	  register (dr3? *wince*) to store eax/whatever into when we have
	  to reliability that the stack is correct.

	  The other optionare to get the CPU to gate us into a different
	  stack, or deliberately handle stuff in double-fault handler if we
	  get a protection violation (BTW Using IO memory for temporary storage
	  is JUST WRONG AL! (and might not be paged in correctly) )

	  (Note, the carefulness we were doing in #PF to avoid not
	   touching the stack may have been kinda irrelevant - see
	   arch/i386/mem.S for more comments)

	- clean up enable_paging disable_paging etc in arch/i386/mem.S
	  to actually save and restore eax on the stack rather than
	  blowing them away.
	
	- stack allocation should happen before splintering off a new thread
	  (even if it's a 0 sized autogrowing one). Currently we use a 
	  temporary stack, splinter the new thread, and the new thread allocates
	  itself a stack, but this is messy setting up the temporary stack
	  and then deciding when to remove it. The current method is a legacy
	  of not having paging or memory allocation working as well.

	(FIXED) vgaprint isn't threadsafe. (wrapped in semaphore vga_print_s
		which is great as long as interrupts are on. kpanic manually
		increments vga_print_s before calling so the semaphore will
		always be available)
	(FIXED)	semaphores aren't safe for use in interrupt handlers
		(they now can be used; deadlock quite easy, so they
		SHOULDN'T be used for locks)
	(FIXED) delete thread sucks; It can't actually deallocate the stack memory.  Need a temporary stack. 
	(FIXED) Paging is setup fine for everything in the kernel, before setup_paging() We are, however, not taking ANYTHING allocated after that. 
	(FIXED) splinter semaphore in arch/i386/tasks.c has a race condition triggered thus:
		- thread 1 calls splinter
		- thread 1 gets semaphore
		- INT 0
		- get_next_switch sees semaphore is set, and copies the /previous/ splinter
		  starting off a random thread
		- new thread gets context
		- eventually thread 1 gets context
		- thread 1 sets where it wants to splinter to
		- thread 1 yields
		- get_next_switch ignores splinter as semaphore isn't held

	  Should seperate getting the mutex and signalling the STS

	(DONE) We should have a way of adding stuff to the kernel page tables for internal kernel stuff 
